#Decorator Syntax
#def uppercase_decorator(func):
#    def wrapper():
#        result = func()
#        return result.upper
#    return wrapper

#def greeting():
#    return 'hello matrix'

#print(greeting())

#greeting_uppercase = uppercase_decorator(greeting)()

#print(greeting_uppercase())

##def cache(func):
##    cache = {}
##    def wrapper(*args):
##        if args in memo:
##            return memo[args]
##        result = func(*args)
##        memo[args] = result
##        return result
##    return wrapper

#@cache
#def fib(n):
#    if n < 2:
#        return 1
#    return fib(n-1) + (n-2)

#fib(500)

#@cache
#def factorial(n):
#    if n == 0:
#        return 1
#    return n * factorial(n-1)

#factorial(200)

class Node:
    def __init__(self, value=None):     #O(1)
        self.left = None
        self.right = None
        self.value = value
        
def insert(root, node):          #O(n)
    if root is None:
        root = node
    else:
        if root.value < node.value:
            if root.right is None:
                root.right = node
            else:
                insert(root.right, node)
        else:
            if root.left is None:
                root.left = node
            else:
                insert(root.left, node)

def to_bst(lst):            #O(N^2)
    root = None
    for value in lst:
        node = Node(value)
        insert(root, node)
    return root

def bst_decorator(original_func):       #O(N^2)
    def wrapper(lst): 
        bst = to_bst(lst)
        return original_func(bst)
    return wrapper

@bst_decorator
def my_func(bst):
    # do something with the binary search tree
    pass

my_list = [5, 2, 8, 1, 3, 7, 9]
my_func(my_list)




